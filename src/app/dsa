'use client';
import { useState, useEffect, memo } from "react";
import clsx from "clsx";
import Link from "next/link";
import { useAuth } from "./context/AuthContext";

// ---------------------
// Debounce hook
// ---------------------
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  return debouncedValue;
}

// ---------------------
// SidebarItem
// ---------------------
const SidebarItem = memo(({ icon, label, collapsed, onClick, selected }) => (
  <div
    onClick={onClick}
    role="button"
    tabIndex={0}
    className={clsx(
      "flex items-center p-1.5 rounded-lg cursor-pointer transition-colors duration-200 hover:bg-white/40 w-full",
      selected && "bg-white/40 shadow"
    )}
  >
    <span className="w-6 h-5 flex justify-center items-center flex-shrink-0">{icon}</span>
    <span
      className={clsx(
        "whitespace-nowrap overflow-hidden transition-all duration-200",
        collapsed ? "w-0 opacity-0 pointer-events-none ml-0" : "opacity-100 ml-2"
      )}
    >
      {label}
    </span>
  </div>
));

// ---------------------
// SidebarHeader
// ---------------------
function SidebarHeader({ collapsed, setCollapsed }) {
  return (
    <div className="mb-2">
      <button
        onClick={() => setCollapsed(!collapsed)}
        className="flex items-center p-1.5 rounded-lg hover:bg-white/40 cursor-pointer transition-colors duration-200 w-full"
      >
        <span className="w-6 h-5 flex justify-center items-center flex-shrink-0 text-gray-600">
          {collapsed ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="black" strokeWidth={2}>
              <path strokeLinecap="round" strokeLinejoin="round" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="black" strokeWidth={2}>
              <path strokeLinecap="round" strokeLinejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
          )}
        </span>
        <span className={clsx("overflow-hidden transition-all duration-200", collapsed ? "w-0 opacity-0" : "opacity-100 ml-2")}>
          Collapse
        </span>
      </button>
    </div>
  );
}

// ---------------------
// PatientList
// ---------------------
const PatientList = memo(({ patients, selectedChat, setSelectedChat, collapsed }) => (
  <div className="mt-8">
    {!collapsed && <h4 className="mb-2 p-1.5 text-gray-500">Patients</h4>}
    <ul className="flex flex-col gap-1">
      {patients.map((p) => (
        <li key={p.id}>
          <Link
            href={`/chat/${p.id}`}
            className={clsx(
              "flex items-center p-1.5 rounded-lg hover:bg-white/40 transition gap-3 w-full",
              selectedChat === p.id && "bg-white/40 shadow"
            )}
            onClick={() => setSelectedChat(p.id)}
          >
            {!collapsed && <span>{p.name}</span>}
          </Link>
        </li>
      ))}
    </ul>
  </div>
));

// ---------------------
// SidebarAccount
// ---------------------
function SidebarAccount({ onClick }) {
  const { user, logout } = useAuth();

  return (
    <div
      onClick={!user ? onClick : undefined}
      className="flex items-center gap-3 p-2 mx-4 mb-2 rounded-lg hover:bg-white/20 cursor-pointer"
    >
      <div className="w-10 h-10 rounded-full bg-gray-600" />
      <div className="flex-1 overflow-hidden">
        {user ? (
          <>
            <span className="truncate font-medium">{user.name || user.email}</span>
            <button
              onClick={logout}
              className="text-xs text-gray-600 hover:underline"
            >
              Logout
            </button>
          </>
        ) : (
          <>
            <span className="truncate font-medium">Guest</span>
            <span className="text-xs text-gray-600">Login</span>
          </>
        )}
      </div>
    </div>
  );
}

// ---------------------
// AuthPopup
// ---------------------
function AuthPopup({ setShowAuth }) {
  const { login } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    await login(email, password);
    setShowAuth(false);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black/40 backdrop-blur-sm z-50" onClick={() => setShowAuth(false)}>
      <div className="bg-white rounded-2xl p-6 w-full max-w-sm relative" onClick={(e) => e.stopPropagation()}>
        <button onClick={() => setShowAuth(false)} className="absolute top-3 right-3">âœ•</button>
        <h2 className="text-lg font-semibold mb-4">Sign in</h2>
        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          <input value={email} onChange={(e) => setEmail(e.target.value)} type="email" placeholder="Email" className="p-2 rounded border" />
          <input value={password} onChange={(e) => setPassword(e.target.value)} type="password" placeholder="Password" className="p-2 rounded border" />
          <button type="submit" className="bg-black text-white py-2 rounded">Login</button>
        </form>
      </div>
    </div>
  );
}

// ---------------------
// Sidebar
// ---------------------
export default function Sidebar({ collapsed, setCollapsed, onNewPatientClick }) {
  const [patients, setPatients] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [showAuth, setShowAuth] = useState(false);

  useEffect(() => {
    fetch("http://127.0.0.1:5000/patients")
      .then((res) => res.json())
      .then(setPatients)
      .catch((err) => console.error(err));
  }, []);

  return (
    <>
      <aside className={clsx(
        "h-screen flex flex-col justify-between transition-all duration-300 overflow-x-hidden",
        collapsed ? "" : "bg-[#243c5a]/15 backdrop-blur-md shadow-lg"
      )}>
        <div className="h-full px-4 overflow-y-auto">
          <SidebarHeader collapsed={collapsed} setCollapsed={setCollapsed} />

          <div className="flex flex-col gap-2">
            <SidebarItem
              icon={<span className="w-5 h-5 bg-gray-300 rounded-full" />}
              label="New patient"
              collapsed={collapsed}
              onClick={onNewPatientClick}
            />
          </div>

          {!collapsed && (
            <PatientList
              patients={patients}
              selectedChat={selectedChat}
              setSelectedChat={setSelectedChat}
              collapsed={collapsed}
            />
          )}
        </div>

        {!collapsed && <SidebarAccount onClick={() => setShowAuth(true)} />}
      </aside>

      {showAuth && <AuthPopup setShowAuth={setShowAuth} />}
    </>
  );
}